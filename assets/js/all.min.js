(function() {
  var app, insertData, itemLabel;

  itemLabel = function(el) {
    return el.itemLabel && el.itemLabel.value || el.item.value.startsWith("http://www.wikidata.org/entity/") && el.item.value.slice(31) || el.item.value;
  };

  insertData = function(graph, data, activeItem, mode) {
    var bindings, circle, container, drag, drag_rect, el, force, i, len, line, links, nodes, resize, svg, svg_group, text, tick, transform, zoom, zoomed;
    graph.selectAll("*").remove();
    if (!data) {
      return;
    }
    svg = graph.append('svg').attr({
      xmlns: "http://www.w3.org/2000/svg",
      xlink: "http://www.w3.org/1999/xlink"
    });
    bindings = data.results.bindings;
    nodes = {};
    for (i = 0, len = bindings.length; i < len; i++) {
      el = bindings[i];
      nodes[el.item.value] = {
        name: itemLabel(el),
        url: el.item.value,
        has_link: !!el.linkTo
      };
    }
    links = (function() {
      var j, len1, ref, results;
      results = [];
      for (j = 0, len1 = bindings.length; j < len1; j++) {
        el = bindings[j];
        if (nodes[(ref = el.linkTo) != null ? ref.value : void 0]) {
          results.push({
            source: nodes[el.item.value],
            target: nodes[el.linkTo.value]
          });
        }
      }
      return results;
    })();
    transform = function(d) {
      return "translate(" + d.x + "," + d.y + ")";
    };
    tick = function() {
      line.attr({
        x1: function(d) {
          return d.source.x;
        },
        y1: function(d) {
          return d.source.y;
        },
        x2: function(d) {
          return d.target.x;
        },
        y2: function(d) {
          return d.target.y;
        }
      });
      circle.attr({
        transform: transform
      });
      text.attr({
        transform: transform
      });
    };
    zoomed = function() {
      container.attr('transform', "translate(" + d3.event.translate + ")scale(" + d3.event.scale + ")");
    };
    zoom = d3.behavior.zoom().on('zoom', zoomed);
    force = d3.layout.force();
    drag = force.drag().on("dragstart", function() {
      d3.event.sourceEvent.stopPropagation();
    });
    force.nodes(d3.values(nodes)).links(links).linkDistance(30).charge(-200).gravity(.05).on('tick', tick).start();
    svg.attr("pointer-events", "all");
    svg.selectAll('*').remove();
    svg.append('defs').selectAll('marker').data(['direction']).enter().append('marker').attr({
      id: (function(d) {
        return d;
      }),
      viewBox: '0 -5 10 10',
      refX: 15,
      markerWidth: 6,
      markerHeight: 6,
      orient: 'auto'
    }).append('path').attr({
      d: 'M0,-5L10,0L0,5'
    });
    svg_group = svg.append("g").attr("transform", "translate(0,0)").call(zoom);
    drag_rect = svg_group.append("rect").style("fill", "none");
    container = svg_group.append("g");
    line = container.append('g').selectAll('line').data(force.links()).enter().append('line').attr({
      'marker-end': 'url(#direction)'
    });
    circle = container.append('g').selectAll('circle').data(force.nodes()).enter().append('circle').attr({
      r: 6
    }).attr("cx", function(d) {
      return d.x;
    }).attr("cy", function(d) {
      return d.y;
    });
    if (mode === 'undirected') {
      circle.classed('linked', function(o) {
        return o.has_link;
      });
    }
    circle.classed('active', function(o) {
      return o.url.endsWith(activeItem);
    });
    circle.call(drag);
    text = container.append('g').selectAll('text').data(force.nodes()).enter().append('text').attr({
      x: 8,
      y: '.31em'
    }).text(function(d) {
      return d.name;
    }).on('click', function(o) {
      window.open(o.url);
    });
    resize = function() {
      var height, toolbarHeight, width;
      toolbarHeight = document.getElementsByTagName('md-toolbar')[0].offsetHeight;
      width = window.innerWidth;
      height = window.innerHeight - toolbarHeight;
      graph.style({
        height: height + 'px'
      });
      svg.attr({
        width: width,
        height: height
      });
      drag_rect.attr({
        width: width,
        height: height
      });
      force.size([width, height]).resume();
    };
    resize();
    d3.select(window).on('resize', resize);
  };

  app = angular.module('Graph', []);

  app.directive('graph', function() {
    return {
      restrict: 'E',
      replace: false,
      scope: {
        graphData: '=',
        activeItem: '=',
        mode: '='
      },
      link: function(scope, element, attrs) {
        scope.$watch('graphData', function(newValue, oldValue) {
          var graph;
          graph = d3.select(element[0]);
          return insertData(graph, scope.graphData, scope.activeItem, scope.mode);
        });
      }
    };
  });

}).call(this);

(function() {
  var WikiTools, WikiToolsService;

  WikiTools = angular.module('WikiTools', []);

  WikiToolsService = function($log, $http, $httpParamSerializer) {
    var self, wdApiParams;
    self = this;
    wdApiParams = $httpParamSerializer({
      format: 'json',
      formatversion: 2,
      callback: 'JSON_CALLBACK'
    });
    this.createApi = function(param1, param2) {
      var ref;
      if (!param2) {
        ref = ['www', param1], param1 = ref[0], param2 = ref[1];
      }
      return "https://" + param1 + "." + param2 + ".org/w/api.php?" + wdApiParams;
    };
    this.wikidata = this.createApi('wikidata');
    this.get = function(api, params) {
      return $http.jsonp(api, {
        params: params
      });
    };
    this.searchEntities = function(type, query, language) {
      var error, params, success;
      params = {
        action: 'wbsearchentities',
        search: query,
        uselang: language,
        language: language,
        type: type,
        "continue": 0
      };
      success = (function(_this) {
        return function(response) {
          return response.data.search;
        };
      })(this);
      error = function(response) {
        $log.error('Request failed');
        return reject('Request failed');
      };
      return self.get(self.wikidata, params).then(success, error);
    };
    this.getEntity = function(what, language) {
      var error, params, success;
      params = {
        action: 'wbsearchentities',
        search: what,
        uselang: language,
        language: language,
        type: what.startsWith('Q') ? 'item' : 'property',
        limit: 1
      };
      success = (function(_this) {
        return function(response) {
          return response.data.search[0];
        };
      })(this);
      error = function(response) {
        $log.error('Request failed');
        return reject('Request failed');
      };
      return self.get(self.wikidata, params).then(success, error);
    };
    this.wdqs = function(query) {
      return $http.get('https://query.wikidata.org/sparql', {
        params: {
          query: query
        }
      });
    };
  };

  WikiToolsService.$inject = ['$log', '$http', '$httpParamSerializer'];

  WikiTools.service('WikiToolsService', WikiToolsService);

}).call(this);

(function() {
  var FormCtrl, app, capitalize, genSparql, genSparqlClause, useGas,
    indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  capitalize = function(string) {
    return string.charAt(0).toUpperCase() + string.slice(1);
  };

  useGas = function(data) {
    return data.limit !== 0 || data.iterations !== 0 || data.mode === 'undirected';
  };

  genSparqlClause = function(data, mode) {
    if (mode == null) {
      mode = data.mode;
    }
    if (mode === "both") {
      return "{ " + (genSparqlClause(data, 'forward')) + " } UNION { " + (genSparqlClause(data, 'reverse')) + " }";
    } else if (!useGas(data)) {
      if (mode === "forward") {
        return "wd:" + data.item + " wdt:" + data.property + "* ?item";
      } else if (mode === "reverse") {
        return "?item wdt:" + data.property + "* wd:" + data.item;
      }
    } else {
      return "SERVICE gas:service {\n    gas:program gas:gasClass \"com.bigdata.rdf.graph.analytics.SSSP\" ;\n                gas:in wd:" + data.item + " ;\n                gas:traversalDirection \"" + (capitalize(mode)) + "\" ;\n                gas:out ?item ;\n                gas:out1 ?depth ;" + (data.iterations === 0 ? "" : "\n                gas:maxIterations " + data.iterations + " ;") + (data.limit === 0 ? "" : "\n                gas:maxVisited " + data.limit + " ;") + "\n                gas:linkType wdt:" + data.property + " .\n  }";
    }
  };

  genSparql = function(data) {
    var out;
    if (!data.item || !data.property) {
      return;
    }
    out = useGas(data) ? "PREFIX gas: <http://www.bigdata.com/rdf/gas#>\n\n" : "";
    return out + ("SELECT ?item ?itemLabel ?linkTo {\n  " + (genSparqlClause(data)) + "\n  OPTIONAL { ?item wdt:" + data.property + " ?linkTo }\n  SERVICE wikibase:label {bd:serviceParam wikibase:language \"" + data.lang + "\" }\n}");
  };

  FormCtrl = function($log, $location, $rootScope, $mdToast, $mdDialog, WikiToolsService) {
    var d, errorToast, getDataFromUrl, itemRefresh, modeKeys, propertyRefresh, rebuildFromUrlOrData, regenSvg;
    this.modes = [
      {
        mode: 'forward',
        text: 'Forward'
      }, {
        mode: 'reverse',
        text: 'Reverse'
      }, {
        mode: 'both',
        text: 'Bidirectional'
      }, {
        mode: 'undirected',
        text: 'Undirected'
      }, {
        mode: 'wdqs',
        text: 'WDQS'
      }
    ];
    modeKeys = (function() {
      var i, len, ref, results;
      ref = this.modes;
      results = [];
      for (i = 0, len = ref.length; i < len; i++) {
        d = ref[i];
        results.push(d.mode);
      }
      return results;
    }).call(this);
    getDataFromUrl = function() {
      var data, params, ref, ref1;
      params = $location.search();
      data = {
        property: /^P\d+$/.test(params.property || '') ? params.property : void 0,
        item: /^Q\d+$/.test(params.item || '') ? params.item : void 0,
        lang: /^[a-z-]{2,}$/.test(params.lang || '') ? params.lang : 'en',
        iterations: /^\d+$/.test(params.iterations || '') ? parseInt(params.iterations) : 0,
        limit: /^\d+$/.test(params.limit || '') ? parseInt(params.limit) : 0,
        mode: (ref = params.mode, indexOf.call(modeKeys, ref) >= 0) ? params.mode : (ref1 = params.direction, indexOf.call(modeKeys, ref1) >= 0) ? params.direction : 'forward',
        wdqs: params.wdqs
      };
      if (!data.wdqs) {
        data.wdqs = genSparql(data);
      }
      return data;
    };
    rebuildFromUrlOrData = (function(_this) {
      return function() {
        var data;
        data = getDataFromUrl();
        if (_this.lang !== data.lang) {
          _this.lang = data.lang;
        }
        if (data.item && !_this.item || _this.item && _this.item.id !== data.item) {
          itemRefresh(data.item);
        }
        if (data.property && !_this.property || _this.property && _this.property.id !== data.property) {
          propertyRefresh(data.property);
        }
        if (_this.iterations !== data.iterations) {
          _this.iterations = data.iterations;
        }
        if (_this.limit !== data.limit) {
          _this.limit = data.limit;
        }
        if (_this.mode !== data.mode) {
          _this.mode = data.mode;
        }
        if (_this.wdqs !== data.wdqs) {
          _this.wdqs = data.wdqs;
        }
        if (data.wdqs) {
          regenSvg(data);
        }
      };
    })(this);
    $rootScope.$on('$locationChangeSuccess', rebuildFromUrlOrData);
    itemRefresh = (function(_this) {
      return function(name) {
        if (!name) {
          return _this.item = _this.itemText = void 0;
        }
        WikiToolsService.getEntity(name, _this.lang).then(function(result) {
          return _this.item = result;
        });
      };
    })(this);
    propertyRefresh = (function(_this) {
      return function(name) {
        if (!name) {
          return _this.property = _this.propertyText = void 0;
        }
        WikiToolsService.getEntity(name, _this.lang).then(function(result) {
          return _this.property = result;
        });
      };
    })(this);
    this.itemSearch = function(query) {
      return WikiToolsService.searchEntities('item', query, this.lang);
    };
    this.propertySearch = function(query) {
      return WikiToolsService.searchEntities('property', query, this.lang);
    };
    this.reset = function() {
      this.graphData = null;
      return $location.search({});
    };
    this.validate = function() {
      return this.mode === 'wdqs' && this.wdqs || this.mode !== 'wdqs' && this.property && this.item && this.property;
    };
    this.build = function() {
      var data;
      data = {};
      if (this.mode !== 'forward') {
        data.mode = this.mode;
      }
      if (this.mode === 'wdqs') {
        data.wdqs = this.wdqs;
      } else {
        data.property = this.property.id;
        data.item = this.item.id;
        if (this.lang !== 'en') {
          data.lang = this.lang;
        }
        if (this.iterations !== 0) {
          data.iterations = this.iterations;
        }
        if (this.limit !== 0) {
          data.limit = this.limit;
        }
      }
      if (JSON.stringify($location.search()) === JSON.stringify(data)) {
        return rebuildFromUrlOrData();
      } else {
        return $location.search(data);
      }
    };
    errorToast = function(message, more) {
      var toast;
      toast = $mdToast.simple().textContent(message).hideDelay(5000);
      if (more) {
        toast.action('More info').highlightAction(true);
      }
      return toast = $mdToast.show(toast).then((function(_this) {
        return function(response) {
          var tpl;
          if (more && response === 'ok') {
            tpl = angular.element("<md-dialog />").attr('aria-label', message).append(angular.element("<pre />").text(more));
            return $mdDialog.show({
              clickOutsideToClose: true,
              template: tpl[0].outerHTML
            });
          }
        };
      })(this));
    };
    regenSvg = (function(_this) {
      return function(data) {
        var insertError, insertSuccess, query, start_time;
        query = data.wdqs;
        start_time = new Date().getTime();
        insertSuccess = function(response) {
          _this.isLoading = false;
          _this.activeItem = data.item;
          return _this.graphData = response.data;
        };
        insertError = function(response) {
          var request_time;
          _this.isLoading = false;
          $log.error('unable to process answer', response.data);
          request_time = new Date().getTime() - start_time;
          if (request_time < 10 * 1000) {
            errorToast('Something is wrong with SPARQL query syntax', response.data);
          } else {
            errorToast('SPARQL query times out');
          }
        };
        _this.isLoading = true;
        WikiToolsService.wdqs(query).then(insertSuccess, insertError);
        _this.showSvg = true;
      };
    })(this);
    this.query = function() {
      var data;
      data = getDataFromUrl();
      window.open('https://query.wikidata.org/#' + encodeURIComponent(data.wdqs));
    };
    this.svg = function() {
      var serializer, source, url;
      serializer = new XMLSerializer();
      source = serializer.serializeToString($('svg')[0]);
      source = '<?xml version="1.0" standalone="no"?>\r\n' + source;
      url = 'data:image/svg+xml;charset=utf-8,' + encodeURIComponent(source);
      window.open(url);
    };
    this.list = function() {
      var data, ref, ref1, url;
      data = getDataFromUrl();
      url = "https://tools.wmflabs.org/wikidata-todo/tree.html?q=" + (data.item.slice(1));
      if ((ref = data.mode) === 'reverse' || ref === 'both') {
        url += "&rp=" + (data.property.slice(1));
      }
      if ((ref1 = data.mode) === 'forward' || ref1 === 'both') {
        url += "&p=" + (data.property.slice(1));
      }
      if (data.iterations !== 0) {
        url += "&depth=" + data.iterations;
      }
      if (data.lang !== 'en') {
        url += "&lang=" + data.lang;
      }
      window.open(url);
    };
  };

  FormCtrl.$inject = ['$log', '$location', '$rootScope', '$mdToast', '$mdDialog', 'WikiToolsService'];

  app = angular.module('WgbApp', ['ngMaterial', 'WikiTools', 'Graph']);

  app.config([
    '$locationProvider', function($locationProvider) {
      $locationProvider.html5Mode({
        enabled: true,
        requireBase: false
      });
    }
  ]);

  app.controller('FormCtrl', FormCtrl);

}).call(this);
